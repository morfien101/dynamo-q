name: dynamo-q
description: Allows you to run DynamoQ server and client in your actions.

inputs:
  action:
    description: 'The action to perform. Options: server-start, client-wait, server-stop'
    required: true
    default: client-wait
  queue-name:
    description: 'The queue name to use for the server. Required for start-server.'
    required: false
    default: ''
  queue-table:
    description: 'The queue table to use for the server. Required for start-server.'
    required: false
    default: 'github-actions-dynamo-q-queue'
  version:
    description: 'The version of dynamo-q to use'
    required: false
    default: 'latest'


runs:
  using: composite
  steps:
    - name: download dynamo-q
      shell: bash
      run: |
        for payload in "dynamoq_manager_linux_amd64" "dynamoq_waiter_linux_amd64"; do
          output_name="/tmp/${payload%%_linux_amd64}"
          if [ ! -f "$output_name" ]; then
            echo "Downloading $payload"
            if [ "${{ inputs.version }}" = "latest" ]; then
              download_url=$(curl -s https://api.github.com/repos/morfien101/dynamo-q/releases/latest | jq -r --arg name $payload '.assets[] | select(.name == $name) | .browser_download_url')
            else
              download_url="https://github.com/morfien101/dynamo-q/releases/download/${{ inputs.version }}/${payload}"
            fi
            curl -sSL -o $output_name $download_url
            chmod 550 $output_name
          fi
          
          if [[ "$output_name" =~ "manager" ]]; then
            echo "DYNAMOQ_SERVER=$output_name" >> $GITHUB_ENV
          elif [[ "$output_name" =~ "waiter" ]]; then
            echo "DYNAMOQ_WAITER=$output_name" >> $GITHUB_ENV
          fi
        done

    - name: run dynamo-q action
      shell: bash
      run: |
        echo "Running dynamo-q action: ${{ inputs.action }}"
        if [[ "${{ inputs.action }}" == "server-start" ]]; then
          # Start the server and pass it to the background
          $DYNAMOQ_SERVER \
          -queue-table "${{ inputs.queue-table }}" \
          -client "${{ github.repository }}-${{ github.run_number }}" \
          -queue-name "${{ inputs.queue-name }}" \
          &
        elif [[ "${{ inputs.action }}" == "client-wait" ]]; then
          $DYNAMOQ_WAITER -wait-for-turn
        elif [[ "${{ inputs.action }}" == "server-stop" ]]; then
          $DYNAMOQ_WAITER -shutdown
          # We need to give the server time to shutdown.
          # currently the client just send the signal and exits.
          # It doesn't know when the server has actually stopped.
          sleep 3
        fi