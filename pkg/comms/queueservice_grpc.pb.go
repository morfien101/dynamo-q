// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: queueservice.proto

package comms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueueService_IsFrontOfQueue_FullMethodName       = "/comms.QueueService/IsFrontOfQueue"
	QueueService_SubscribeQueueStatus_FullMethodName = "/comms.QueueService/SubscribeQueueStatus"
	QueueService_Shutdown_FullMethodName             = "/comms.QueueService/Shutdown"
)

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	// Checks if the lock is currently held
	IsFrontOfQueue(ctx context.Context, in *QueueRequest, opts ...grpc.CallOption) (*QueueStatus, error)
	// Waits for a signal that the lock is obtained
	SubscribeQueueStatus(ctx context.Context, in *QueueRequest, opts ...grpc.CallOption) (QueueService_SubscribeQueueStatusClient, error)
	// Tells the lock handler to shut down
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) IsFrontOfQueue(ctx context.Context, in *QueueRequest, opts ...grpc.CallOption) (*QueueStatus, error) {
	out := new(QueueStatus)
	err := c.cc.Invoke(ctx, QueueService_IsFrontOfQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) SubscribeQueueStatus(ctx context.Context, in *QueueRequest, opts ...grpc.CallOption) (QueueService_SubscribeQueueStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueueService_ServiceDesc.Streams[0], QueueService_SubscribeQueueStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queueServiceSubscribeQueueStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueueService_SubscribeQueueStatusClient interface {
	Recv() (*QueueStatus, error)
	grpc.ClientStream
}

type queueServiceSubscribeQueueStatusClient struct {
	grpc.ClientStream
}

func (x *queueServiceSubscribeQueueStatusClient) Recv() (*QueueStatus, error) {
	m := new(QueueStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queueServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, QueueService_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations must embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	// Checks if the lock is currently held
	IsFrontOfQueue(context.Context, *QueueRequest) (*QueueStatus, error)
	// Waits for a signal that the lock is obtained
	SubscribeQueueStatus(*QueueRequest, QueueService_SubscribeQueueStatusServer) error
	// Tells the lock handler to shut down
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedQueueServiceServer()
}

// UnimplementedQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) IsFrontOfQueue(context.Context, *QueueRequest) (*QueueStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFrontOfQueue not implemented")
}
func (UnimplementedQueueServiceServer) SubscribeQueueStatus(*QueueRequest, QueueService_SubscribeQueueStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeQueueStatus not implemented")
}
func (UnimplementedQueueServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_IsFrontOfQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).IsFrontOfQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_IsFrontOfQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).IsFrontOfQueue(ctx, req.(*QueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_SubscribeQueueStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueueServiceServer).SubscribeQueueStatus(m, &queueServiceSubscribeQueueStatusServer{stream})
}

type QueueService_SubscribeQueueStatusServer interface {
	Send(*QueueStatus) error
	grpc.ServerStream
}

type queueServiceSubscribeQueueStatusServer struct {
	grpc.ServerStream
}

func (x *queueServiceSubscribeQueueStatusServer) Send(m *QueueStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _QueueService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsFrontOfQueue",
			Handler:    _QueueService_IsFrontOfQueue_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _QueueService_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeQueueStatus",
			Handler:       _QueueService_SubscribeQueueStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "queueservice.proto",
}
