// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: lockservice.proto

package comms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LockService_IsLockHeld_FullMethodName          = "/comms.LockService/IsLockHeld"
	LockService_SubscribeLockStatus_FullMethodName = "/comms.LockService/SubscribeLockStatus"
	LockService_Shutdown_FullMethodName            = "/comms.LockService/Shutdown"
)

// LockServiceClient is the client API for LockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockServiceClient interface {
	// Checks if the lock is currently held
	IsLockHeld(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	// Waits for a signal that the lock is obtained
	SubscribeLockStatus(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (LockService_SubscribeLockStatusClient, error)
	// Tells the lock handler to shut down
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type lockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLockServiceClient(cc grpc.ClientConnInterface) LockServiceClient {
	return &lockServiceClient{cc}
}

func (c *lockServiceClient) IsLockHeld(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, LockService_IsLockHeld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) SubscribeLockStatus(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (LockService_SubscribeLockStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &LockService_ServiceDesc.Streams[0], LockService_SubscribeLockStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lockServiceSubscribeLockStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LockService_SubscribeLockStatusClient interface {
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type lockServiceSubscribeLockStatusClient struct {
	grpc.ClientStream
}

func (x *lockServiceSubscribeLockStatusClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lockServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, LockService_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockServiceServer is the server API for LockService service.
// All implementations must embed UnimplementedLockServiceServer
// for forward compatibility
type LockServiceServer interface {
	// Checks if the lock is currently held
	IsLockHeld(context.Context, *LockRequest) (*LockResponse, error)
	// Waits for a signal that the lock is obtained
	SubscribeLockStatus(*LockRequest, LockService_SubscribeLockStatusServer) error
	// Tells the lock handler to shut down
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedLockServiceServer()
}

// UnimplementedLockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLockServiceServer struct {
}

func (UnimplementedLockServiceServer) IsLockHeld(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLockHeld not implemented")
}
func (UnimplementedLockServiceServer) SubscribeLockStatus(*LockRequest, LockService_SubscribeLockStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLockStatus not implemented")
}
func (UnimplementedLockServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedLockServiceServer) mustEmbedUnimplementedLockServiceServer() {}

// UnsafeLockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockServiceServer will
// result in compilation errors.
type UnsafeLockServiceServer interface {
	mustEmbedUnimplementedLockServiceServer()
}

func RegisterLockServiceServer(s grpc.ServiceRegistrar, srv LockServiceServer) {
	s.RegisterService(&LockService_ServiceDesc, srv)
}

func _LockService_IsLockHeld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).IsLockHeld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_IsLockHeld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).IsLockHeld(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_SubscribeLockStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LockServiceServer).SubscribeLockStatus(m, &lockServiceSubscribeLockStatusServer{stream})
}

type LockService_SubscribeLockStatusServer interface {
	Send(*LockResponse) error
	grpc.ServerStream
}

type lockServiceSubscribeLockStatusServer struct {
	grpc.ServerStream
}

func (x *lockServiceSubscribeLockStatusServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LockService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LockService_ServiceDesc is the grpc.ServiceDesc for LockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.LockService",
	HandlerType: (*LockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsLockHeld",
			Handler:    _LockService_IsLockHeld_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _LockService_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeLockStatus",
			Handler:       _LockService_SubscribeLockStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lockservice.proto",
}
