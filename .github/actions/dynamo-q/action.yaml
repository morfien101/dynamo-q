name: dynamo-q
description: |
  Github action that allows the running of dynamo-q server and client commands.
  When using action server-start, you will need to provide authentication to AWS.
  Authentication for AWS is left to the user to provide. It is generally expected
  that this will be set using environment variables or a profile.

inputs:
  action:
    description: 'The action to perform. Options: server-start, client-wait, server-stop'
    required: true
    default: client-wait
  lock-id:
    description: 'The lock id to use for the server. Required for start-server.'
    required: false
    default: ''
  lock-table:
    description: 'The lock table to use for the server. Required for start-server.'
    required: false
    default: 'github-actions-dynamo-q-lock'
  queue-table:
    description: 'The queue table to use for the server. Required for start-server.'
    required: false
    default: 'github-actions-dynamo-q-queue'
  version:
    description: 'The version of dynamo-q to use'
    required: false
    default: 'latest'


runs:
  using: composite
  steps:
    - name: download dynamo-q
      shell: bash
      run: |
        for payload in "dynamoq_manager_linux_amd64" "dynamoq_waiter_linux_amd64"; do
          output_name="/tmp/${payload%%_linux_amd64}"
          if [ ! -f "$output_name" ]; then
            echo "Downloading $payload"
            download_url=$(curl -s https://api.github.com/repos/morfien101/dynamo-q/releases/latest | jq -r --arg name $payload '.assets[] | select(.name == $name) | .browser_download_url')
            curl -L -o $output_name $download_url
            chmod 550 $output_name
          fi
          
          if [[ "$output_name" =~ "manager" ]]; then
            echo "DYNAMOQ_SERVER=$output_name" >> $GITHUB_ENV
          elif [[ "$output_name" =~ "waiter" ]]; then
            echo "DYNAMOQ_WAITER=$output_name" >> $GITHUB_ENV
          fi
        done
    
    - name: run dynamo-q action
      shell: bash
      run: |
        echo "Running dynamo-q action: ${{ inputs.action }}"
        if [[ "${{ inputs.action }}" == "server-start" ]]; then
          # Start the server and pass it to the background
          $DYNAMOQ_SERVER \
          -lock-table "${{ inputs.lock-table }}" \
          -queue-table "${{ inputs.queue-table }}" \
          -client "${{ github.repository }}-${{ github.run_number }}" \
          -lock "${{ inputs.lock-id }}" \
          &
        elif [[ "${{ inputs.action }}" == "client-wait" ]]; then
          $DYNAMOQ_WAITER -wait-for-lock
        elif [[ "${{ inputs.action }}" == "server-stop" ]]; then
          $DYNAMOQ_WAITER -shutdown
          # We need to give the server time to shutdown.
          # currently the client just send the signal and exits.
          # It doesn't know when the server has actually stopped.
          sleep 3
        fi