name: build and test
on: 
  push:
    branches:
      - main
    tags:
      - v*
jobs:
  just_test:
    if: startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "^1.22"
      - name: go test
        run: go test -v ./...
  test_build_release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "^1.22"
      - name: Get the version
        id: get_tag
        run: echo "SOURCE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: go test
        run: go test -v ./...
      - name: install upx
        run: |
          sudo apt-get update
          sudo apt-get install -y upx
      - name: build
        shell: bash
        run: |
          # Make an artifacts directory
          mkdir -p artifacts

          manager_bin_name="dynamoq_manager"
          manager_dir="cmd/lock_manager"
          waiter_bin_name="dynamoq_waiter"
          waiter_dir="cmd/lock_waiter"

          # Run the build for each supported OS using x86_64.
          # Building for windows.
          echo "Building for Windows on amd64..."
          options="GOOS=windows GOARCH=amd64 CGO_ENABLED=0"
          (cd $manager_dir && GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -a -ldflags="-X main.version=${{ steps.get_tag.outputs.SOURCE_TAG }}" -o ../../artifacts/${manager_bin_name}_windows.exe.fat .)
          (cd $waiter_dir && GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -a -ldflags="-X main.version=${{ steps.get_tag.outputs.SOURCE_TAG }}" -o ../../artifacts/${waiter_bin_name}_windows.exe.fat .)

          # Make an ARM and ARM64 bin for linux and Mac.
          for os in "linux" "darwin"; do
            for arch in "amd64" "arm64" "arm"; do
              echo "Building for $os on $arch..."
              if [ "$os" = "darwin" ] && [ "$arch" = "arm" ]; then
                echo "Skipping $os on $arch..."
                continue
              fi
              options="GOOS=$os GOARCH=$arch CGO_ENABLED=0"
              (cd $manager_dir && GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build -a -ldflags="-X main.version=${{ steps.get_tag.outputs.SOURCE_TAG }}" -o ../../artifacts/${manager_bin_name}_${os}_${arch}.fat .)
              (cd $waiter_dir && GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build -a -ldflags="-X main.version=${{ steps.get_tag.outputs.SOURCE_TAG }}" -o ../../artifacts/${waiter_bin_name}_${os}_${arch}.fat .)
            done
          done

          for file in $(ls ./artifacts/*.fat); do
            upx -9 -o ${file%%.fat} $file
            rm -f $file
          done

      - name: Release
        if: ${{ ! env.ACT }}
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
          body_path: .github/workflows/release_body.md
        env:
          GITHUB_TOKEN: ${{ github.token }}